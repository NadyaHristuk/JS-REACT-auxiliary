{"version":3,"sources":["Chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["window","socket","location","origin","path","Chat","state","online","input","messages","handlerChange","e","_this","setState","target","value","recMessage","content","time","moment","format","message","prev","concat","Object","toConsumableArray","emit","_this2","this","on","data","_this$state","react_default","a","createElement","className","Container","fluid","MessageHeader","Segment","clearing","Header","as","floated","style","marginBottom","Subheader","Comment","Group","map","el","Avatar","Content","Author","Metadata","Text","Input","name","label","Button","icon","labelPosition","placeholder","onChange","widths","color","onClick","Component","App","src_Chat_Chat","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c88ff86.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, MessageHeader, Segment, Comment, Input, Button, Header, Icon} from 'semantic-ui-react';\nimport moment from 'moment';\nimport socket from \"socket.io-client\";\nimport axios from \"axios\";\nwindow.socket = socket(window.location.origin, {\n    path: \"/chat/\"\n});\n\nclass Chat extends Component {\n    state = {\n        online: 1,\n        input:'',\n        messages:[],\n    }\n\n    componentDidMount(){\n        // axios.get('http://localhost:3003/')\n        //     .then( data => this.setState({messages: data.data}))\n        //     .catch( err => console.log(err))\n\n        window.socket.on(\"change-online\", (online) => {\n            this.setState({\n                online: online\n            })\n        })\n        window.socket.on(\"all-masseges\", (data) => {\n            this.setState({\n                messages: data.data\n            })\n        })\n        window.socket.on(\"new-message\", (message) => {\n            // this.props.getMessage(message);\n            this.setState (prev => ({\n                messages: [...prev.messages, message],\n            }))\n        });\n    }\n    \n\n    handlerChange=(e)=>{\n      this.setState({\n          input:e.target.value\n      })\n    }\n\n    recMessage=()=>{\n        let content = {\n            time: moment().format('LTS'),\n            message:this.state.input,\n        }\n        this.setState(prev =>({\n            messages:[...prev.messages,content],\n            input: '',\n        }))\n        window.socket.emit(\"message\", content);        \n}\n\n\n  render() {\n      const {input , messages}= this.state;\n    return (\n      <div className='container'>\n        <Container fluid>\n\n        <MessageHeader/>\n           <Segment>\n\n           <Segment clearing>\n                <Header \n                fluid='true'\n                as='h2'\n                floated='left'\n                style={{\n                    marginBottom: 0\n                }}>\n                <Header.Subheader>\n                    Our Chat / Online Users: {this.state.online}\n                </Header.Subheader>\n                </Header>\n            </Segment>\n\n             <Comment.Group className='messages'>\n             {messages.map( el =>\n                 <Comment>\n                 <Comment.Avatar/>\n                 <Comment.Content>\n                     <Comment.Author as='a'>\n                         author\n                     </Comment.Author>\n                     <Comment.Metadata>\n                        {el.time}\n                     </Comment.Metadata>\n\n                  <Comment.Text>{el.message}</Comment.Text>\n                 </Comment.Content>\n             </Comment>)}\n\n             </Comment.Group>\n           </Segment>\n\n\n           <Segment className='message__form'>\n                <Input\n                    fluid\n                    name='message'\n                    style={{\n                        marginBottom: '.7rem'\n                    }}\n                    label={<Button icon='add'/>}\n                    labelPosition='left'\n                    placeholder='Write your message'\n                    onChange={this.handlerChange}\n                    value={this.state.input}\n                   />\n                <Button.Group icon widths='2'>\n                    <Button color='orange' content='Add Reply' labelPosition='left' icon='edit' onClick={this.recMessage} />\n                    {/* <Button color='teal' content='Upload media' labelPosition='right' icon='cloud upload' onClick={this.toggleModal}/> */}\n                </Button.Group>\n            </Segment>\n\n\n\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default Chat\n","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './Chat/Chat';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Chat/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}